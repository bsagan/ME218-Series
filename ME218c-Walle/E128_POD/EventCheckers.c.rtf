{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 MS Shell Dlg 2;}}{\colortbl;\red255\green255\blue255;\red00\green00\blue00;\red255\green00\blue00;\red255\green00\blue00;\red00\green00\blue255;\red00\green00\blue255;\red255\green34\blue255;\red255\green34\blue255;\red255\green00\blue00;\red00\green00\blue255;\red00\green00\blue00;\red178\green104\blue24;\red00\green255\blue00;\red178\green104\blue24;\red00\green00\blue00;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf5{// Event Checking functions for sample}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include <stdio.h>}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Configure.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_General.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Events.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_PostList.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"EventCheckers.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"CommandSM.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include <mc{9}s{1}{2}e{1}{2}{8}.h>}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// This include will pull in all of the headers from the service modules}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// providing the prototypes for all of the post functions}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_ServiceHeaders.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}\par\pard
\cbpat1{boolean}} {\cf15{Check{4}ActiveMission}}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf13{void}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf5{//LimitSwitch = HI when ready}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{unsigned char}} {\cf2{CurrentPinState}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{    boolean ReturnVal}} {\cf11{=}} {\cf2{False}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{static unsigned int}} {\cf2{CurTime}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf13{static unsigned int}} {\cf2{OldTime}} {\cf11{=}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}\par\pard
\cbpat1{    CurrentPinState}} {\cf11{=}} {\cf2{}}{\cf15{QueryButtonVal}}{\cf2{}}{\cf11{();}} {\cf2{}}{\cf5{//this button value is only updated every {2}{0}ms}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf6{/* Check for ButtonPress for Active Mission; if the connect button is up,}}}\par\pard
\cbpat1{{\cf6{    we want to do everything we can to stay connected to the ROAMER */}}{\cf2{}\par\pard
\cbpat1{    CurTime}} {\cf11{=}} {\cf2{}}{\cf15{ES_Timer_GetTime}}{\cf2{}}{\cf11{();}}}\par\pard
\cbpat1{{\cf2{}}    {\cf12{if}} {\cf2{}}{\cf11{(  (}}{\cf2{CurTime}} {\cf11{-}} {\cf2{OldTime}}{\cf11{) >}} {\cf2{}}{\cf4{{1}{0}{0}}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}        {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{            OldTime}} {\cf11{=}} {\cf2{CurTime}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}            {\cf12{if}} {\cf2{}}{\cf11{( (}}{\cf2{}}{\cf15{QueryCommandSM}}{\cf2{}}{\cf11{() ==}} {\cf2{IdlingDisconnected}}{\cf11{) && (}}{\cf2{CurrentPinState}} {\cf11{==}} {\cf2{LO}}{\cf11{) )}}}\par\pard
\cbpat1{{\cf2{}}                {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}                    {\cf5{// event detected, so post detected event}}}\par\pard
\cbpat1{{\cf2{                    ES_Event ThisEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{                    ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{MISSION_ACTIVE}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{                    ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{=}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}                    {\cf15{PostCommandSM}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{                    ReturnVal}} {\cf11{=}} {\cf2{True}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}                {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}            {\cf12{else if}} {\cf2{}}{\cf11{( ((}}{\cf2{}}{\cf15{QueryCommandSM}}{\cf2{}}{\cf11{() ==}} {\cf2{IdlingConnected}}{\cf11{) | (}}{\cf2{}}{\cf15{QueryCommandSM}}{\cf2{}}{\cf11{() ==}} {\cf2{Waiting{4}Status}}{\cf11{)) && (}}{\cf2{CurrentPinState}} {\cf11{==}} {\cf2{HI}}{\cf11{) )}}}\par\pard
\cbpat1{{\cf2{}}                {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{                    ES_Event ThisEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}                    {\cf5{//printf("We are posting a MISSION_END\\r\\n");}}}\par\pard
\cbpat1{{\cf2{                    ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{MISSION_END}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{                    ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{=}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}                    {\cf15{PostCommandSM}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}                    {\cf5{//printf("posted mission end \\r\\n");}}}\par\pard
\cbpat1{{\cf2{                    ReturnVal}} {\cf11{=}} {\cf2{True}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}                {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}        {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf12{return}} {\cf2{ReturnVal}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*boolean Check{4}EndMission( void )}}}\par\pard
\cbpat1{{\cf6{\{}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  unsigned char CurrentPinState;}}}\par\pard
\cbpat1{{\cf6{  boolean ReturnVal = False;}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  CurrentPinState = QueryButtonVal();}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  //check for ButtonPress for Terminate Mission when connected}}}\par\pard
\cbpat1{{\cf6{  //if (QueryCommandSM() == IdlingConnected)}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{     if ( ((QueryCommandSM() == IdlingConnected) | (QueryCommandSM() == Waiting{4}Status)) && (CurrentPinState == HI) )}}}\par\pard
\cbpat1{{\cf6{     \{}}}\par\pard
\cbpat1{{\cf6{       ES_Event ThisEvent;}}}\par\pard
\cbpat1{{\cf6{       ThisEvent.EventType = MISSION_END;}}}\par\pard
\cbpat1{{\cf6{       ThisEvent.EventParam = {1};}}}\par\pard
\cbpat1{{\cf6{       PostCommandSM(ThisEvent);}}}\par\pard
\cbpat1{{\cf6{       //printf("posted mission end \\r\\n");}}}\par\pard
\cbpat1{{\cf6{       ReturnVal = True;}}}\par\pard
\cbpat1{{\cf6{     \}}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  LastPinState = CurrentPinState;}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  return ReturnVal;}}}\par\pard
\cbpat1{{\cf6{\}  */}}{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/*boolean Check{4}PodChange( void )}}}\par\pard
\cbpat1{{\cf6{\{}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  static unsigned char LastPodNumber = LO;}}}\par\pard
\cbpat1{{\cf6{  unsigned char CurrentPodNumber;}}}\par\pard
\cbpat1{{\cf6{  boolean ReturnVal = False;}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  CurrentPodNumber = GetPodNum();}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  //check for ButtonPress for Terminate Mission when connected}}}\par\pard
\cbpat1{{\cf6{  //if (QueryCommandSM() == IdlingConnected)}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{     if ( CurrentPodNumber != LastPodNumber )}}}\par\pard
\cbpat1{{\cf6{     \{}}}\par\pard
\cbpat1{{\cf6{       ES_Event ThisEvent;}}}\par\pard
\cbpat1{{\cf6{       ThisEvent.EventType = MISSION_END;}}}\par\pard
\cbpat1{{\cf6{       ThisEvent.EventParam = {1};}}}\par\pard
\cbpat1{{\cf6{       PostCommandSM(ThisEvent);}}}\par\pard
\cbpat1{{\cf6{       //printf("posted mission end \\r\\n");}}}\par\pard
\cbpat1{{\cf6{       ReturnVal = True;}}}\par\pard
\cbpat1{{\cf6{     \}}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  LastPodNumber = CurrentPodNumber;}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{  return ReturnVal;}}}\par\pard
\cbpat1{{\cf6{\}  */}}{\cf2{}\par\pard
\cbpat1{}\par\pard
\cbpat1{}\par\pard
\cbpat1{boolean}} {\cf15{Check{4}RDRF}} {\cf2{}}{\cf11{(}} {\cf2{}}{\cf13{void}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{    boolean ReturnVal}} {\cf11{=}} {\cf2{False}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}    {\cf5{// check if RCIF flag has been set}}}\par\pard
\cbpat1{{\cf2{}}    {\cf12{if}} {\cf2{}}{\cf11{(}} {\cf2{SCI{1}SR{1}_RDRF}} {\cf11{==}} {\cf2{}}{\cf4{{1}}} {\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}        {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}            {\cf5{// event detected, so post detected event}}}\par\pard
\cbpat1{{\cf2{            ES_Event ThisEvent}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{            {\cf5{// Clear Flag - assume the XBeeComSM will read the SCI{1}DRL register before overwrite}}}\par\pard
\cbpat1{{\cf2{            SCI{1}SR{1}}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{            SCI{1}DRL}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{            ThisEvent}}{\cf11{.}}{\cf2{EventType}} {\cf11{=}} {\cf2{RDRF_SET}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{            ThisEvent}}{\cf11{.}}{\cf2{EventParam}} {\cf11{=}} {\cf2{}}{\cf4{{1}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}            {\cf15{PostXBeeComSM}}{\cf2{}}{\cf11{(}}{\cf2{ThisEvent}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{            ReturnVal}} {\cf11{=}} {\cf2{True}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}        {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf12{return}} {\cf2{ReturnVal}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}}
